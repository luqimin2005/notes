---
- name: Create the required Ansible groups
  hosts: localhost
  connection: local
  gather_facts: False
  tasks:
    - name: Add nodes to hadoop-cluster group
      add_host:
        name: "{{ hostvars[local_loop]['inventory_hostname'] }}"
        ansible_host: "{{ hostvars[local_loop]['ansible_host']|default(hostvars[local_loop]['inventory_hostname']) }}"    
        ansible_user: "{{ hostvars[local_loop]['ansible_user']|default('root') }}"
        ansible_ssh_private_key_file: "{{ hostvars[local_loop]['ansible_ssh_private_key_file']|default(omit) }}"
        ansible_ssh_pass: "{{ hostvars[local_loop]['ansible_ssh_pass']|default(omit) }}"
        ansible_become_user: root
        groups: hadoop-cluster
      loop_control:
        loop_var: local_loop
      with_items: "{{ groups['all'] }}"
      when: groups['hadoop-cluster'] is not defined or groups['hadoop-cluster']|length == 0

    - name: Initialize the ambari_groups list
      set_fact:
        ambari_groups: []

    - debug: 
        msg: "{{ item }}"
      with_items: "{{ blueprint_dynamic }}"

    - block:
        - name: Populate the ambari_groups list (dynamic blueprint)
          set_fact:
            ambari_groups: "{{ ambari_groups }} + [ '{{ item.host_group }}' ]"
          when: groups[item.host_group] is defined and groups[item.host_group]|length > 0 and 'AMBARI_SERVER' in item.services
          with_items: "{{ blueprint_dynamic }}"
          no_log: True
      when: blueprint_file == 'blueprint_dynamic.j2'

    - name: Fail if the ambari_groups list is empty
      fail:
        msg: "The ambari_groups list is empty. This usually means there is no 'AMBARI_SERVER' component defined in the blueprint or there is no Ansible inventory group corresponding with the name of the blueprint's host_group."
      when: ambari_groups|length == 0

    - name: Fail if there is no Ansible inventory group matching the blueprint's host_groups
      fail:
        msg: "The {{ item }} host_group is defined in the blueprint but there is no matching Ansible inventory group called {{ item }} or there are no hosts in this group."
      when: groups[item] is not defined or groups[item]|length == 0
      with_items: "{{ ambari_groups }}"

    - name: Add nodes to the ambari-server group
      add_host:
        name: "{{ groups[ambari_groups|first]|first }}"
        groups: "ambari-server"

- name: Create the Ansible helper variables for the ambari-server
  hosts: ambari-server
  gather_facts: False
  tasks:
    - name: Initialize the control variables
      set_fact:
        namenode_groups: []
        zkfc_groups: []
        hive_mysql_embedded_group: ''
        resourcemanager_groups: []
        journalnode_groups: []
        zookeeper_groups: []
        zookeeper_hosts: []
        hiveserver_hosts: []
        oozie_hosts: []
        atlas_hosts: []
        druid_hosts: []
        superset_hosts: []
        kafka_groups: []
        kafka_hosts: []
        rangeradmin_groups: []
        rangeradmin_hosts: []
        rangerkms_hosts: []
        streamline_hosts: []
        registry_hosts: []
        hdf_hosts: []
        solr_hosts: []
        blueprint_all_services: []
        blueprint_all_clients: []
        install_hdp: False
        install_hdf: False
        install_hdpsearch: False
        blueprint_static: ""
      no_log: True

    - block:
        - name: Populate the namenode groups list
          set_fact:
            namenode_groups: "{{ namenode_groups }} + [ '{{ item.host_group }}' ]"
          when: groups[item.host_group] is defined and groups[item.host_group]|length > 0 and 'NAMENODE' in item.services
          with_items: "{{ blueprint_dynamic }}"
          no_log: True

        - name: Populate the ZKFailoverController groups list
          set_fact:
            zkfc_groups: "{{ zkfc_groups }} + [ '{{ item.host_group }}' ]"
          when: groups[item.host_group] is defined and groups[item.host_group]|length > 0 and 'ZKFC' in item.services
          with_items: "{{ blueprint_dynamic }}"
          no_log: True

        - name: Populate the resourcemanager groups list
          set_fact:
            resourcemanager_groups: "{{ resourcemanager_groups }} + [ '{{ item.host_group }}' ]"
          when: groups[item.host_group] is defined and groups[item.host_group]|length > 0 and 'RESOURCEMANAGER' in item.services
          with_items: "{{ blueprint_dynamic }}"
          no_log: True

        - name: Populate the journalnode groups list
          set_fact:
            journalnode_groups: "{{ journalnode_groups }} + [ '{{ item.host_group }}' ]"
          when: groups[item.host_group] is defined and groups[item.host_group]|length > 0 and 'JOURNALNODE' in item.services
          with_items: "{{ blueprint_dynamic }}"
          no_log: True

        - name: Populate the hive_mysql_embedded groups list
          set_fact:
            hive_mysql_embedded_group: "{{ item.host_group }}"
          when: not hive_mysql_embedded_group and database == 'embedded' and 'HIVE_METASTORE' in item.services and groups[item.host_group] is defined and groups[item.host_group]|length > 0
          with_items: "{{ blueprint_dynamic }}"
          no_log: True

        - name: Populate the zookeeper groups list
          set_fact:
            zookeeper_groups: "{{ zookeeper_groups }} + [ '{{ item.host_group }}' ]"
          when: groups[item.host_group] is defined and groups[item.host_group]|length > 0 and 'ZOOKEEPER_SERVER' in item.services
          with_items: "{{ blueprint_dynamic }}"
          no_log: True

        - name: Populate the zookeeper hosts list
          set_fact:
            zookeeper_hosts: "{{ zookeeper_hosts }} + {{ groups[item.host_group] }}"
          when: groups[item.host_group] is defined and groups[item.host_group]|length > 0 and 'ZOOKEEPER_SERVER' in item.services
          with_items: "{{ blueprint_dynamic }}"
          no_log: True

        - name: Populate the hiveserver hosts list
          set_fact:
            hiveserver_hosts: "{{ hiveserver_hosts }} + {{ groups[item.host_group] }}"
          when: groups[item.host_group] is defined and groups[item.host_group]|length > 0 and ('HIVE_SERVER' in item.services or 'HIVE_METASTORE' in item.services)
          with_items: "{{ blueprint_dynamic }}"
          no_log: True

        - name: Populate the oozie hosts list
          set_fact:
            oozie_hosts: "{{ oozie_hosts }} + {{ groups[item.host_group] }}"
          when: groups[item.host_group] is defined and groups[item.host_group]|length > 0 and ('OOZIE_SERVER' in item.services)
          with_items: "{{ blueprint_dynamic }}"
          no_log: True

        # - name: Populate the atlas hosts list
        #   set_fact:
        #     atlas_hosts: "{{ atlas_hosts }} + {{ groups[item.host_group] }}"
        #   when: groups[item.host_group] is defined and groups[item.host_group]|length > 0 and ('ATLAS_SERVER' in item.services)
        #   with_items: "{{ blueprint_dynamic }}"
        #   no_log: True

        # - name: Populate the druid hosts list
        #   set_fact:
        #     druid_hosts: "{{ druid_hosts }} + {{ groups[item.host_group] }}"
        #   when: groups[item.host_group] is defined and groups[item.host_group]|length > 0 and ('DRUID_BROKER' in item.services or 'DRUID_COORDINATOR' in item.services or 'DRUID_ROUTER' in item.services or 'DRUID_MIDDLEMANAGER' in item.services or 'DRUID_HISTORICAL' in item.services or 'DRUID_OVERLORD' in item.services)
        #   with_items: "{{ blueprint_dynamic }}"
        #   no_log: True

        # - name: Populate the superset hosts list
        #   set_fact:
        #     superset_hosts: "{{ superset_hosts }} + {{ groups[item.host_group] }}"
        #   when: groups[item.host_group] is defined and groups[item.host_group]|length > 0 and ('SUPERSET' in item.services)
        #   with_items: "{{ blueprint_dynamic }}"
        #   no_log: True

        # - name: Populate the kafka groups and hosts lists
        #   set_fact:
        #     kafka_groups: "{{ kafka_groups }} + [ '{{ item.host_group }}' ]"
        #     kafka_hosts: "{{ kafka_hosts }} + {{ groups[item.host_group] }}"
        #   when: groups[item.host_group] is defined and groups[item.host_group]|length > 0 and ('KAFKA_BROKER' in item.services)
        #   with_items: "{{ blueprint_dynamic }}"
        #   no_log: True

        # - name: Populate the rangeradmin groups list
        #   set_fact:
        #     rangeradmin_groups: "{{ rangeradmin_groups }} + [ '{{ item.host_group }}' ]"
        #   when: groups[item.host_group] is defined and groups[item.host_group]|length > 0 and ('RANGER_ADMIN' in item.services or 'RANGER_USERSYNC' in item.services)
        #   with_items: "{{ blueprint_dynamic }}"
        #   no_log: True

        # - name: Populate the rangeradmin hosts list
        #   set_fact:
        #     rangeradmin_hosts: "{{ rangeradmin_hosts }} + {{ groups[item.host_group] }}"
        #   when: groups[item.host_group] is defined and groups[item.host_group]|length > 0 and ('RANGER_ADMIN' in item.services or 'RANGER_USERSYNC' in item.services)
        #   with_items: "{{ blueprint_dynamic }}"
        #   no_log: True

        # - name: Populate the rangerkms hosts list
        #   set_fact:
        #     rangerkms_hosts: "{{ rangerkms_hosts }} + {{ groups[item.host_group] }}"
        #   when: groups[item.host_group] is defined and groups[item.host_group]|length > 0 and ('RANGER_KMS_SERVER' in item.services)
        #   with_items: "{{ blueprint_dynamic }}"
        #   no_log: True

        # - name: Populate the streamline hosts list
        #   set_fact:
        #     streamline_hosts: "{{ streamline_hosts }} + {{ groups[item.host_group] }}"
        #   when: groups[item.host_group] is defined and groups[item.host_group]|length > 0 and ('STREAMLINE_SERVER' in item.services)
        #   with_items: "{{ blueprint_dynamic }}"
        #   no_log: True

        # - name: Populate the registry hosts list
        #   set_fact:
        #     registry_hosts: "{{ registry_hosts }} + {{ groups[item.host_group] }}"
        #   when: groups[item.host_group] is defined and groups[item.host_group]|length > 0 and ('REGISTRY_SERVER' in item.services)
        #   with_items: "{{ blueprint_dynamic }}"
        #   no_log: True

        # - name: Populate the hdf hosts list
        #   set_fact:
        #     hdf_hosts: "{{ hdf_hosts }} + {{ groups[item.host_group] }}"
        #   when: groups[item.host_group] is defined and groups[item.host_group]|length > 0 and ('NIFI_MASTER' in item.services or 'STREAMLINE_SERVER' in item.services or 'REGISTRY_SERVER' in item.services)
        #   with_items: "{{ blueprint_dynamic }}"
        #   no_log: True

        # - name: Populate the solr hosts list
        #   set_fact:
        #     solr_hosts: "{{ solr_hosts }} + {{ groups[item.host_group] }}"
        #   when: groups[item.host_group] is defined and groups[item.host_group]|length > 0 and ('SOLR_SERVER' in item.services)
        #   with_items: "{{ blueprint_dynamic }}"
        #   no_log: True

        - name: Populate the all services and clients lists
          set_fact:
            blueprint_all_services: "{{ blueprint_all_services | union(item.services) }}"
            blueprint_all_clients: "{{ blueprint_all_clients | union(item.clients) }}"
          when: groups[item.host_group] is defined and groups[item.host_group]|length > 0
          with_items: "{{ blueprint_dynamic }}"
          no_log: True

        - name: Set the install_hdp variable
          set_fact:
            install_hdp: True
          when: namenode_groups|length > 0

        # - name: Set the install_hdf variable
        #   set_fact:
        #     install_hdf: True
        #   when: hdf_hosts|length > 0

        # - name: Set the install_hdpsearch variable
        #   set_fact:
        #     install_hdpsearch: True
        #   when: solr_hosts|length > 0
      when: blueprint_file == 'blueprint_dynamic.j2'
